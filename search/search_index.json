{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the SorusBoxScan Documentation","text":"<p>SorusBoxScan is a device designed to measure the quality of 5G/4G/3G mobile network signals within a given area.</p> <p>It can provide data in real time whenever it connects to a suitable mobile network. If no connection is available, the device caches the data locally and relays it once connectivity is restored.</p> <p>The device can be mounted on a flying drone or any type of vehicle to extend its operational range.</p>"},{"location":"#hardware-description","title":"Hardware Description","text":"<p>Physically, the device is a Raspberry Pi equipped with a 5G HAT:</p> <ul> <li>Raspberry Pi 5</li> <li>SIM8200EA-M2 5G HAT</li> </ul>"},{"location":"#architecture","title":"Architecture","text":"<p>The Raspberry Pi 5 runs a Linux-based operating system. Ubuntu is recommended due to compatibility issues with the drivers on Raspberry Pi OS (formerly known as Raspbian). Other Linux distributions may work, but have not been tested.</p> <p>Once the Raspberry Pi boots (assuming the inserted SIM card does not require a PIN), it will automatically connect to the mobile network and to the MQTT server. The system will begin publishing geo-positioned signal quality measurements to the MQTT server as soon as they are available.</p> <p>Warning</p> <p>The Raspberry Pi must be connected to a mobile network to collect signal quality data. This is not just a convenience: the hardware used only provides signal metrics when there is an active data connection to the assessed network.</p> <p>If the device cannot establish or maintain a connection, it will buffer the measurements and transmit them once the connection is restored. The system is designed for signal data consumers or processors to connect to the MQTT server as clients.</p> <p></p>"},{"location":"#how-to-exploit-the-data","title":"How to Exploit the Data","text":"<ul> <li>Any MQTT client can subscribe to the signal quality messages in real time.</li> <li>The SorusBoxScan Python SDK provides tools and libraries to help you develop applications for 5G-enabled drones.</li> <li>The SorusBoxScan Database Connector stores each message sent by the Raspberry Pi in a database for future use. It is implemented using the SDK.</li> </ul>"},{"location":"#acknowledgement","title":"Acknowledgement","text":"<p>This work is supported by the Spanish Ministry of Economic Affairs and Digital Transformation and the European Union-NextGenerationEU through the UNICO 5G I+D SORUS project.</p> <p> </p>"},{"location":"example/","title":"Example of data collection","text":""},{"location":"example/#conditions","title":"Conditions","text":"<p>To verify the consistency of the datasets collected by the device, it was mounted in a vehicle alongside a Samsung Galaxy S23 Ultra phone. The phone used G-NetTrack Lite to log the measured signals.</p> <p>For nearly 2.5 hours, both devices recorded the received signal strength and position every second. During this time, the vehicle was driven through residential streets, conventional roads, and motorways at speeds of up to 120 km/h. The vehicle was also stationary for 1.5 hours to observe how the measurements evolved over time. Unfortunately, these measurements were not recorded correctly because the device failed to correlate the data with the GPS location.</p> <p>The signal strength was measured in RSRP, as this was the only available metric for the mobile device. However, the SorusBoxScan also logged the RSRQ.</p>"},{"location":"example/#mapped-results","title":"Mapped results","text":"<p>The map was divided into 50x50 meter square cells. The recorded signal strengths were color-coded on the map, representing the average RSRP for each cell according to the legend.</p> <p></p> <p>It was observed that the SorusBoxScan device generally recorded better signal strength, likely due to its larger external antennas. However, the signal strength showed a high correlation between both devices. The correlation was not consistent across all stretches, which was expected since the devices were not always connected to the same band. The phone connected to 5G SA, while the SorusBoxScan connected to 5G NSA. Upon manual review, it was observed that the phone tended to connect to the N78 band for longer periods compared to the SorusBoxScan device.</p> <p>Unfortunately, the mobile phone software did not record the band to which the phone was connected. However, this detail is available for the SorusBoxScan.</p> <p>Additionally, the mobile operator's antennas in the test area can be viewed in the Antenas M\u00f3viles website.</p>"},{"location":"example/#results-by-band-on-the-sorusboxscan-device","title":"Results by band on the SorusBoxScan device","text":""},{"location":"example/#b0","title":"b0","text":""},{"location":"example/#b3","title":"b3","text":""},{"location":"example/#b7","title":"b7","text":""},{"location":"example/#b8","title":"b8","text":""},{"location":"example/#b20","title":"b20","text":""},{"location":"example/#n78","title":"n78","text":""},{"location":"install/","title":"Setting up the SorusBoxScan Device","text":"<p>Note</p> <p>This page will guide you through the installation of the software required to run the device. Details on the physical mounting of the device can be found on the manufacturer's website.</p> <p>You might also find the official documentation for the SIM8200EA-M2 5G HAT helpful.</p>"},{"location":"install/#prerequisites","title":"Prerequisites","text":"<ol> <li>The device must be physically assembled.</li> <li>A SIM card must be installed. SIM cards with PIN codes are currently not supported, though support may be added in the future. The SIM must provide network access.</li> <li>The device must have Ubuntu installed. You can follow the official Ubuntu documentation to complete this step.</li> <li>You must have root console access to the device, either physically or via SSH.</li> </ol>"},{"location":"install/#connecting-to-the-network","title":"Connecting to the Network","text":"<p>First, install the required packages:</p> <pre><code>sudo apt update\nsudo apt install libqmi-utils udhcpc\n</code></pre> <p>Then, establish the connection. You may want to create a shell script to connect to the network on startup:</p> startnet.sh<pre><code>#!/bin/sh\n\n/usr/bin/qmi-network /dev/cdc-wdm0 start\n/usr/bin/ip link set wwan0 up\n/usr/sbin/udhcpc -q -f -n -i wwan0\n</code></pre> <p>If you need to set the APN, do so in <code>/etc/qmi-network.conf</code>. For example, for Movistar in Spain:</p> /etc/qmi-network.conf<pre><code>APN=telefonica.es\n</code></pre>"},{"location":"install/#installing-the-control-software","title":"Installing the control software","text":"What is the control software <p>The control software is a Python application that connects to the HAT via serial interface and to the MQTT server via the Raspberry Pi's network connection (whether through the HAT modem, Ethernet port, or Wi-Fi antenna).</p> <p>Upon establishing a connection with the HAT, the software issues two AT commands:</p> <ul> <li><code>AT+CGPSINFO=1</code> to start receiving geopositioning data.</li> <li><code>AT+CPSI=1</code> to start receiving network quality and connectivity data.</li> </ul> <p>The HAT will then send geopositioning and network quality data every second. For each valid network data message, the control software sends a geo-tagged message to the MQTT server.</p> Messages received from the HATMessage sent to the MQTT server <pre><code>DEBUG:hat:&lt; +CGPSINFO: XXX.XXXXXX,N,XXX.XXXXXX,W,220725,170219.0,654.9,0.0,0.0\nDEBUG:hat:&lt; +CPSI: LTE,Online,214-07,0x6FB9,73795850,13,EUTRAN-BAND3,1301,5,5,-192,-773,-374,3\n</code></pre> <pre><code>DEBUG:mqtt:signal/EUTRAN-BAND3&gt; XXX.XXXXXX,N,XXX.XXXXXX,W,220725,170219.0,654.9,0.0,0.0,LTE,Online,214-07,0x6FB9,73795850,13,EUTRAN-BAND3,1301,5,5,-192,-773,-374,3\n</code></pre> <p>If no geopositioning data is available, the message is discarded.</p> <p>In some cases, the HAT may report signal quality for multiple bands. When this occurs, the software will send multiple messages to the MQTT server, each containing the same position and timestamp but for different bands.</p> <p>The control software is distributed as a Snap package. You can download the latest Snap package from the Releases section on GitHub.</p> Building a custom Snap package <p>If you need to run a modified version of the software, install Snapcraft and build your own package:</p> Building a custom snap package<pre><code>sudo apt update\nsudo apt install snapcraft git\ngit clone https://github.com/aferre88/5gdrone.git\ncd 5gdrone\n# Make the necessary changes\nsnapcraft\n</code></pre> <p>A <code>.snap</code> file will be created in the directory. This is the package you'll need to install instead of the downloaded one.</p> <pre><code>wget https://github.com/aferre88/5gdrone/releases/download/2024.10.1/5gdrone_2024.10.1_arm64.snap\nsudo snap install ./5gdrone_2024.10.1_arm64.snap --dangerous # (1)\n</code></pre> <ol> <li>The \"dangerous\" flag may be required as the package is unsigned.</li> </ol>"},{"location":"install/#pointing-to-the-correct-mqtt-server","title":"Pointing to the correct MQTT server","text":"<p>Configure the MQTT server with either one line per variable or a one-liner:</p> One variable per lineOne liner <pre><code>sudo snap set 5gdrone mqtt.host=mqtt.uc3m.es\nsudo snap set 5gdrone mqtt.port=8883\nsudo snap set 5gdrone mqtt.user=username\nsudo snap set 5gdrone mqtt.pass=password\n</code></pre> <pre><code>sudo snap set 5gdrone mqtt.host=mqtt.uc3m.es mqtt.port=8883 mqtt.user=username mqtt.pass=password\n</code></pre> <p>Then restart the service:</p> <pre><code>sudo snap restart 5gdrone\n</code></pre>"},{"location":"install/#troubleshooting","title":"Troubleshooting","text":""},{"location":"install/#setting-the-log-level-to-debug","title":"Setting the log level to debug","text":"<pre><code>sudo snap set 5gdrone loglevel=DEBUG\nsudo snap restart 5gdrone\n</code></pre>"},{"location":"install/#follow-the-logs","title":"Follow the logs","text":"<pre><code>sudo journalctl -u snap.5gdrone.5gdrone.service -f\n</code></pre>"},{"location":"how-to-exploit-the-data/1mqtt-client/","title":"Using an MQTT Client","text":"<p>Any MQTT client can be used to receive messages with signal quality measurements as they are generated. This is useful for verifying that the system is working properly before starting a measurement session.</p> <p>Below are some recommended MQTT clients for different platforms:</p>"},{"location":"how-to-exploit-the-data/1mqtt-client/#linux","title":"Linux","text":"<ul> <li>Mosquitto \u2014 command-line client.</li> <li>MQTT Explorer \u2014 graphical user interface.</li> </ul>"},{"location":"how-to-exploit-the-data/1mqtt-client/#windows","title":"Windows","text":"<ul> <li>MQTT Explorer \u2014 graphical user interface.</li> </ul>"},{"location":"how-to-exploit-the-data/1mqtt-client/#android","title":"Android","text":"<ul> <li>My MQTT</li> </ul>"},{"location":"how-to-exploit-the-data/1mqtt-client/#iphone","title":"iPhone","text":"<ul> <li>Do you have a favorite? Let us know and we\u2019ll include it!</li> </ul>"},{"location":"how-to-exploit-the-data/2sdk/","title":"Using the SorusBoxScan SDK","text":"<p>The SorusBoxScan Python SDK provides tools and libraries to help you develop applications for 5G-enabled drones.</p>"},{"location":"how-to-exploit-the-data/2sdk/#features","title":"Features","text":"<ul> <li>Easy integration with 5G drones</li> <li>Real-time data streaming</li> <li>Advanced drone control APIs</li> <li>Comprehensive documentation (in progress)</li> </ul>"},{"location":"how-to-exploit-the-data/2sdk/#prerequisites","title":"Prerequisites","text":"<ul> <li>A system with Python installed</li> <li>A virtual environment is recommended for running your project</li> <li>The SDK is hosted in a private repository, so you need an authenticated Git session. Username/password prompts will not work on GitHub.</li> </ul>"},{"location":"how-to-exploit-the-data/2sdk/#setting-up-a-virtual-environment","title":"Setting up a Virtual Environment","text":""},{"location":"how-to-exploit-the-data/2sdk/#on-linux-mac-os-or-similar","title":"On Linux, Mac OS or similar","text":"<pre><code>python -m venv .venv\nsource .venv/bin/activate\n</code></pre>"},{"location":"how-to-exploit-the-data/2sdk/#on-windows-using-cmd","title":"On Windows, using CMD","text":"<pre><code>python -m venv .venv\n.\\.venv\\Scripts\\activate.bat\n</code></pre>"},{"location":"how-to-exploit-the-data/2sdk/#on-windows-using-powershell","title":"On Windows, using PowerShell","text":"<pre><code>python -m venv .venv\n.\\.venv\\Scripts\\activate.ps1\n</code></pre>"},{"location":"how-to-exploit-the-data/2sdk/#on-windows-unix-like-shells-eg-git-bash-cli","title":"On Windows' UNIX-like shells (e.g. Git Bash CLI)","text":"<pre><code>python -m venv .venv\nsource .venv/Scripts/activate\n</code></pre>"},{"location":"how-to-exploit-the-data/2sdk/#authenticating-with-github","title":"Authenticating with GitHub","text":"<ol> <li> <p>Install GitHub CLI:</p> <p>In Linux debian-based systems:</p> <pre><code>sudo apt-get update\nsudo apt-get install gh\n</code></pre> <p>In Windows: <pre><code>winget install --id GitHub.cli\n</code></pre> Or go to the GitHub CLI download page.</p> </li> <li> <p>Authenticate GitHub CLI: <pre><code>gh auth login\n</code></pre></p> </li> <li> <p>Follow the prompts to authenticate:</p> <ul> <li>Select <code>GitHub.com</code>.</li> <li>Choose <code>HTTPS</code> as the preferred protocol.</li> <li>Authenticate with your preferred method (browser or token).</li> </ul> </li> </ol> <p>Now your Git session is authenticated for GitHub on both Linux and Windows using the GitHub CLI.</p> <p>You can now use git on GitHub's private repositories you have access to just like if they were public.</p>"},{"location":"how-to-exploit-the-data/2sdk/#installation","title":"Installation","text":"<p>To install the SDK:</p> <pre><code>pip install git+https://github.com/aferre88/5gdrone-sdk\n</code></pre> <p>If your project has a <code>requirements.txt</code>, you can run <code>pip freeze &gt; requirements.txt</code> to pin the dependency.</p>"},{"location":"how-to-exploit-the-data/2sdk/#update","title":"Update","text":"<p>To upgrade the SDK to the latest version:</p> <pre><code>pip install git+https://github.com/aferre88/5gdrone-sdk -U\n</code></pre>"},{"location":"how-to-exploit-the-data/2sdk/#usage","title":"Usage","text":"<p>Here\u2019s a basic example to get started. You can use this as a template:</p> example.py example.py<pre><code>\"\"\"\nThis is an example of how to use the FiveGDroneSDK class to subscribe to the signals topic.\n\"\"\"\n\nfrom fivegdrone_sdk import FiveGDroneSDK\n\n# Environment variables\nMQTT_BROKER = \"mqtt.eclipse.org\"\nMQTT_USERNAME = \"username\"\nMQTT_PASSWORD = \"password\"\nMQTT_PORT = 1883\n\n# Create a new instance of the SDK\nhat = FiveGDroneSDK(MQTT_BROKER, MQTT_PORT, MQTT_USERNAME, MQTT_PASSWORD)\n\n\n# The @hat.signals decorator is used to subscribe to the signals topic\n# The signal_printer function will be called every time a signal is received\n# The signal object is passed as an argument to the function\n@hat.signals\ndef signal_printer(signal):\n    \"\"\"\n    In this example, all the attributes of the signal object are printed,\n    but you can modify the function to do whatever you want with the signal.\n\n    E.g. if you only need the rssi attribute, you can modify the function like this:\n\n    @hat.signals\n    def print_only_rssi(signal):\n        print(f\"Received signal: {signal.rssi}\")\n    \"\"\"\n    print(\"Received signal:\")\n    for attr, value in signal.__dict__.items():\n        if attr == \"position\":\n            print(f\"  {attr}:\")\n            for attr_val, value_val in value.__dict__.items():\n                print(f\"    {attr_val}: {value_val}\")\n            print(f\"    decimal degrees: {value.get_decimal_position()}\")\n            print(f\"    degrees, minutes, seconds: {value.get_dms_position()}\")\n        else:\n            print(f\"  {attr}: {value}\")\n\n\n# Starts the MQTT session and blocks the main thread so the program doesn't end\n# If you want the program to end, you can substitute the start_blocking method\n# with the hat.start_async() method.\nhat.start_blocking()\n</code></pre>"},{"location":"how-to-exploit-the-data/2sdk/#basic-integration","title":"Basic integration","text":""},{"location":"how-to-exploit-the-data/2sdk/#import-the-sdk","title":"Import the SDK","text":"<pre><code>from fivegdrone_sdk import FiveGDroneSDK\n</code></pre>"},{"location":"how-to-exploit-the-data/2sdk/#setup-the-connection-to-the-drones-queue","title":"Setup the connection to the drone's queue","text":"<pre><code>hat = FiveGDroneSDK(MQTT_BROKER, MQTT_PORT, MQTT_USERNAME, MQTT_PASSWORD)\n</code></pre>"},{"location":"how-to-exploit-the-data/2sdk/#create-a-signals-handling-function","title":"Create a signal's handling function","text":"<p><pre><code>@hat.signals\ndef signal_handling_function(signal):\n    print(f\"Signal received in band {signal.frequency_band}\")\n</code></pre> Your function will be called for every signal received from the drone.</p> <p>Check the list of attributes for the Signal class.</p> <p>Instead of the <code>@hat.signals</code> decorator, you can use the <code>@hat.raw_signals</code> decorator to receive all the information in a single string rather than a Signal object.</p>"},{"location":"how-to-exploit-the-data/2sdk/#loop-the-connection","title":"Loop the connection","text":"<p>You need to trigger the connection loop in order for the MQTT handler to process the messages.</p> <p>Typically you will need to block the execution of the script to avoid the program exiting rather than keeping the connection open indefinitelly, for doing this, you can use this sentence:</p> <pre><code>hat.start_blocking()\n</code></pre>"},{"location":"how-to-exploit-the-data/2sdk/#asyncronous-loop","title":"Asyncronous loop","text":"<p>If you don't want to block the execution of the script (e.g. you are handling your own threads), you can use the non-blocking alternative: <pre><code>hat.start_async()\n</code></pre></p>"},{"location":"how-to-exploit-the-data/2sdk/#sending-messages-to-the-queue","title":"Sending messages to the queue","text":"<p>Messages can be passed to the queue in order to control the drone or to return information that might be useful for other consumers connected to the queue.</p>"},{"location":"how-to-exploit-the-data/2sdk/#sending-an-at-command-to-the-hat","title":"Sending an AT command to the hat","text":"<p>E.g. to send the AT message to turn on the GPS module <pre><code>hat.send('control/command', 'AT+CGPS=1')\n</code></pre></p>"},{"location":"how-to-exploit-the-data/2sdk/#sending-instructions-to-the-drone-operator-via-the-instructions-topic","title":"Sending instructions to the drone operator via the instructions topic","text":"<pre><code>hat.send('instructions', 'Go to (53,47)')\n</code></pre>"},{"location":"how-to-exploit-the-data/2sdk/#subscribe-and-unsubscribe","title":"Subscribe and unsubscribe","text":"<p>You can subscribe yourself to arbitrary topics in the MQTT server. This allows you to exchange information between different related systems.</p>"},{"location":"how-to-exploit-the-data/2sdk/#example-subscription-to-the-instructions-queue","title":"Example subscription to the instructions queue","text":"<pre><code>def do_for_each_instructions_message(client, userdata, message):\n    print(f\"Instructions message: {message.payload.decode()}\")\n\nhat.subscribe('instructions', 2, do_for_each_instructions_message) # Topic, QOS, callback\n</code></pre> <p>You can later undo the subscription with: <pre><code>hat.unsubscribe('instructions', do_for_each_instructions_message)\n</code></pre></p>"},{"location":"how-to-exploit-the-data/2sdk/#other-functions","title":"Other functions","text":""},{"location":"how-to-exploit-the-data/2sdk/#to-ask-the-hat-to-pause-sending-signals","title":"To ask the hat to pause sending signals","text":"<pre><code>hat.pause()\n</code></pre>"},{"location":"how-to-exploit-the-data/2sdk/#to-ask-the-hat-to-resume-sending-signals","title":"To ask the hat to resume sending signals","text":"<pre><code>hat.resume()\n</code></pre>"},{"location":"how-to-exploit-the-data/2sdk/#to-stop-the-loop-and-disconnect-from-the-mqtt-server","title":"To stop the loop and disconnect from the MQTT server","text":"<pre><code>hat.stop()\n</code></pre>"},{"location":"how-to-exploit-the-data/2sdk/#the-signal-class","title":"The Signal class","text":"<p>The <code>Signal</code> class represents signals received from the drone. It is designed to handle various types of signals and provides methods to access and represent these signals.</p>"},{"location":"how-to-exploit-the-data/2sdk/#attributes","title":"Attributes","text":"<ul> <li><code>position</code> (GPSPosition): The GPS position data.</li> <li><code>system_mode</code> (str): The type of network used by the drone.</li> <li><code>operation_mode</code> (str): The mode of operation of the hat. It will usually be <code>Online</code>.</li> <li><code>mcc</code> (str): The Mobile Country Code.</li> <li><code>mnc</code> (str): The Mobile Network Code.</li> <li><code>tac</code> (str): The Tracking Area Code.</li> <li><code>scell_id</code> (str): The serving cell ID.</li> <li><code>pcell_id</code> (str): The primary cell ID.</li> <li><code>frequency_band</code> (str): The frequency band.</li> <li><code>earfcn</code> (str): The E-UTRA Absolute Radio Frequency Channel Number.</li> <li><code>dlbw</code> (str): The downlink bandwidth.</li> <li><code>ulbw</code> (str): The uplink bandwidth.</li> <li><code>rsrq</code> (str): The Reference Signal Received Quality.</li> <li><code>rsrp</code> (str): The Reference Signal Received Power.</li> <li><code>rssi</code> (str): The Received Signal Strength Indicator.</li> <li><code>rssnr</code> (str): The Reference Signal Signal-to-Noise Ratio.</li> <li><code>snr</code> (str): The Signal-to-Noise Ratio.</li> <li><code>scs</code> (str): The Subcarrier Spacing.</li> <li><code>nr_dl_bw</code> (str): The NR downlink bandwidth.</li> </ul> <p>Note that not all attributes will be set in all signals, as the device might be connected to multiple bands.</p>"},{"location":"how-to-exploit-the-data/2sdk/#when-connected-to-a-lte-network","title":"When connected to a LTE network","text":"<p>You will receive one signal with the following attributes:</p> <ul> <li><code>position</code> (GPSPosition): The GPS position data.</li> <li><code>system_mode</code> (str): The type of network used by the drone.</li> <li><code>operation_mode</code> (str): The mode of operation of the hat. It will usually be <code>Online</code>.</li> <li><code>mcc</code> (str): The Mobile Country Code.</li> <li><code>mnc</code> (str): The Mobile Network Code.</li> <li><code>tac</code> (str): The Tracking Area Code.</li> <li><code>scell_id</code> (str): The serving cell ID.</li> <li><code>pcell_id</code> (str): The primary cell ID.</li> <li><code>frequency_band</code> (str): The frequency band.</li> <li><code>earfcn</code> (str): The E-UTRA Absolute Radio Frequency Channel Number.</li> <li><code>dlbw</code> (str): The downlink bandwidth.</li> <li><code>ulbw</code> (str): The uplink bandwidth.</li> <li><code>rsrq</code> (str): The Reference Signal Received Quality.</li> <li><code>rsrp</code> (str): The Reference Signal Received Power.</li> <li><code>rssi</code> (str): The Received Signal Strength Indicator.</li> <li><code>rssnr</code> (str): The Reference Signal Signal-to-Noise Ratio.</li> </ul> <p><code>system_node</code> will be <code>LTE</code>.</p>"},{"location":"how-to-exploit-the-data/2sdk/#when-connected-to-a-5g-nsa-network","title":"When connected to a 5G NSA network","text":"<p>You will receive a <code>LTE</code> signal following the previous definition, and one or more signals with <code>system_mode</code> set to <code>NR5G_NSA</code> and the following attributes:</p> <ul> <li><code>position</code> (GPSPosition): The GPS position data.</li> <li><code>system_mode</code> (str): The type of network used by the drone.</li> <li><code>pcell_id</code> (str): The primary cell ID.</li> <li><code>frequency_band</code> (str): The frequency band.</li> <li><code>earfcn</code> (str): The E-UTRA Absolute Radio Frequency Channel Number.</li> <li><code>rsrp</code> (str): The Reference Signal Received Power.</li> <li><code>rsrq</code> (str): The Reference Signal Received Quality.</li> <li><code>snr</code> (str): The Signal-to-Noise Ratio.</li> <li><code>scs</code> (str): The Subcarrier Spacing.</li> <li><code>nr_dl_bw</code> (str): The NR downlink bandwidth.</li> </ul>"},{"location":"how-to-exploit-the-data/2sdk/#when-connected-to-a-5g-sa-network","title":"When connected to a 5G SA network","text":"<p>You will receive signals with the <code>system_mode</code> set to <code>NR5G_SA</code>, and the following attributes:</p> <ul> <li><code>position</code> (GPSPosition): The GPS position data.</li> <li><code>system_mode</code> (str): The type of network used by the drone.</li> <li><code>operation_mode</code> (str): The mode of operation of the hat. It will usually be <code>Online</code>.</li> <li><code>mcc</code> (str): The Mobile Country Code.</li> <li><code>mnc</code> (str): The Mobile Network Code.</li> <li><code>tac</code> (str): The Tracking Area Code.</li> <li><code>scell_id</code> (str): The serving cell ID.</li> <li><code>pcell_id</code> (str): The primary cell ID.</li> <li><code>frequency_band</code> (str): The frequency band.</li> <li><code>earfcn</code> (str): The E-UTRA Absolute Radio Frequency Channel Number.</li> <li><code>rsrp</code> (str): The Reference Signal Received Power.</li> <li><code>rsrq</code> (str): The Reference Signal Received Quality.</li> <li><code>snr</code> (str): The Signal-to-Noise Ratio.</li> </ul>"},{"location":"how-to-exploit-the-data/2sdk/#when-not-connected-to-a-network","title":"When not connected to a network","text":"<p>You will receive signals with the <code>system_mode</code> set to <code>NO SERVICE</code>, and the following attributes:</p> <ul> <li><code>position</code> (GPSPosition): The GPS position data.</li> <li><code>system_mode</code> (str): The type of network used by the drone.</li> <li><code>operation_mode</code> (str): The mode of operation of the hat. It will usually be <code>Online</code>.</li> </ul>"},{"location":"how-to-exploit-the-data/2sdk/#nested-class-gpsposition","title":"Nested Class: GPSPosition","text":"<p>The <code>GPSPosition</code> class represents GPS position data.</p>"},{"location":"how-to-exploit-the-data/2sdk/#methods","title":"Methods","text":""},{"location":"how-to-exploit-the-data/2sdk/#get_datetimeself","title":"<code>get_datetime(self)</code>","text":"<p>Returns the date and time reported by the GPS service.</p> <p>Returns: - <code>datetime</code>: Date and time reported by the GPS service.</p>"},{"location":"how-to-exploit-the-data/2sdk/#get_positionself","title":"<code>get_position(self)</code>","text":"<p>Returns the GPS position in DDMM.MMMMMM format (decimal minutes).</p> <p>Returns: - <code>tuple</code>: A tuple containing the latitude and longitude of the GPS position.     - <code>float</code>: Latitude in DDMM.MMMMMM format.     - <code>str</code>: Latitude direction (N or S).     - <code>float</code>: Longitude in DDMM.MMMMMM format.     - <code>str</code>: Longitude direction (E or W).</p>"},{"location":"how-to-exploit-the-data/2sdk/#get_decimal_positionself","title":"<code>get_decimal_position(self)</code>","text":"<p>Returns the GPS position in decimal degrees.</p> <p>Returns: - <code>tuple</code>: A tuple containing the latitude and longitude of the GPS position.     - <code>float</code>: Latitude in decimal degrees.     - <code>float</code>: Longitude in decimal degrees.</p>"},{"location":"how-to-exploit-the-data/2sdk/#get_dms_positionself","title":"<code>get_dms_position(self)</code>","text":"<p>Returns the GPS position in sexagesimal format.</p> <p>Returns: - <code>tuple</code>: A tuple containing the latitude and longitude of the GPS position.     - <code>tuple</code>: A tuple containing the latitude in sexagesimal format.         - <code>int</code>: Degrees.         - <code>int</code>: Minutes.         - <code>float</code>: Seconds.         - <code>str</code>: Direction (N or S).     - <code>tuple</code>: A tuple containing the longitude in sexagesimal format.         - <code>int</code>: Degrees.         - <code>int</code>: Minutes.         - <code>float</code>: Seconds.         - <code>str</code>: Direction (E or W).</p>"},{"location":"how-to-exploit-the-data/2sdk/#get_altitude_metersself","title":"<code>get_altitude_meters(self)</code>","text":"<p>Returns the altitude of the GPS position in meters.</p> <p>Returns: - <code>float</code>: The altitude of the GPS in meters.</p>"},{"location":"how-to-exploit-the-data/2sdk/#get_speed_knotsself","title":"<code>get_speed_knots(self)</code>","text":"<p>Returns the speed of the GPS position in knots.</p> <p>Returns: - <code>float</code>: The speed of the GPS in knots.</p>"},{"location":"how-to-exploit-the-data/2sdk/#get_speed_kmhself","title":"<code>get_speed_kmh(self)</code>","text":"<p>Returns the speed of the GPS position in km/h.</p> <p>Returns: - <code>float</code>: The speed of the GPS in km/h.</p>"},{"location":"how-to-exploit-the-data/2sdk/#get_courseself","title":"<code>get_course(self)</code>","text":"<p>Returns the course of the GPS position.</p> <p>Returns: - <code>float</code>: The course of the GPS position.</p>"},{"location":"how-to-exploit-the-data/3db/","title":"Using the Database Connector","text":"<p>The SorusBoxScan DB Connector is a tool based on the SorusBoxScan Python SDK that stores each received signal in a MariaDB database.</p>"},{"location":"how-to-exploit-the-data/3db/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8+</li> <li> <p>If you're using Linux, install the MariaDB binary libraries:</p> <pre><code>sudo apt install libmariadb3 libmariadb-dev\n</code></pre> </li> </ul>"},{"location":"how-to-exploit-the-data/3db/#create-the-database-structure","title":"Create the database structure","text":"<p>Run the following SQL script in your MariaDB instance:</p> <pre><code>CREATE TABLE signals (\n    id INT(11) NOT NULL AUTO_INCREMENT,\n    lat DECIMAL(10,6) DEFAULT NULL,\n    lon DECIMAL(10,6) DEFAULT NULL,\n    datetime DATETIME DEFAULT NULL,\n    alt DECIMAL(10,2) DEFAULT NULL,\n    speed DECIMAL(10,2) DEFAULT NULL,\n    course DECIMAL(10,2) DEFAULT NULL,\n    system_mode VARCHAR(50) DEFAULT NULL,\n    operation_mode VARCHAR(50) DEFAULT NULL,\n    mcc VARCHAR(10) DEFAULT NULL,\n    mnc VARCHAR(10) DEFAULT NULL,\n    tac VARCHAR(10) DEFAULT NULL,\n    scell_id VARCHAR(50) DEFAULT NULL,\n    pcell_id VARCHAR(50) DEFAULT NULL,\n    frequency_band VARCHAR(50) DEFAULT NULL,\n    earfcn VARCHAR(50) DEFAULT NULL,\n    dlbw VARCHAR(50) DEFAULT NULL,\n    ulbw VARCHAR(50) DEFAULT NULL,\n    rsrq VARCHAR(50) DEFAULT NULL,\n    rsrp VARCHAR(50) DEFAULT NULL,\n    rssi VARCHAR(50) DEFAULT NULL,\n    rssnr VARCHAR(50) DEFAULT NULL,\n    snr VARCHAR(50) DEFAULT NULL,\n    scs VARCHAR(50) DEFAULT NULL,\n    nr_dl_bw VARCHAR(50) DEFAULT NULL,\n    PRIMARY KEY (id)\n);\n</code></pre>"},{"location":"how-to-exploit-the-data/3db/#configure-environment-variables","title":"Configure Environment Variables","text":"<p>Create a <code>.env</code> file in the project root. You can use <code>.env.example</code> as a template.</p>"},{"location":"how-to-exploit-the-data/3db/#run-the-project","title":"Run the Project","text":"<p>Use the following command to start the connector:</p> <pre><code>python -m fivegdrone_db\n</code></pre>"}]}